// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Data;

#nullable disable

namespace Store.Migrations
{
    [DbContext(typeof(SklepContext))]
    [Migration("20250501100657_DodajOpisIZdjecieDoProduktu")]
    partial class DodajOpisIZdjecieDoProduktu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Store.Models.PozycjaZamowienia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("Cena")
                        .HasColumnType("real");

                    b.Property<int>("Ilosc")
                        .HasColumnType("int");

                    b.Property<int>("ProduktID")
                        .HasColumnType("int");

                    b.Property<int>("ZamowienieID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProduktID");

                    b.HasIndex("ZamowienieID");

                    b.ToTable("PozycjeZamowien");
                });

            modelBuilder.Entity("Store.Models.Produkt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("Cena")
                        .HasColumnType("real");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZdjecieUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ilosc")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Produkty");
                });

            modelBuilder.Entity("Store.Models.Uzytkownicy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerTelefonu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UlicaNumerDomuMieszkania")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("Store.Models.Zamowienie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DataZlozenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UzytkownikId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Zamowienia");
                });

            modelBuilder.Entity("Store.Models.PozycjaZamowienia", b =>
                {
                    b.HasOne("Store.Models.Produkt", "Produkt")
                        .WithMany()
                        .HasForeignKey("ProduktID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.Zamowienie", "Zamowienie")
                        .WithMany("Pozycje")
                        .HasForeignKey("ZamowienieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produkt");

                    b.Navigation("Zamowienie");
                });

            modelBuilder.Entity("Store.Models.Zamowienie", b =>
                {
                    b.HasOne("Store.Models.Uzytkownicy", "Uzytkownik")
                        .WithMany()
                        .HasForeignKey("UzytkownikId");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("Store.Models.Zamowienie", b =>
                {
                    b.Navigation("Pozycje");
                });
#pragma warning restore 612, 618
        }
    }
}
